#!/usr/bin/env node
// **Config, as called from the command line**
// saves config files to heroku config vars
var program = require('commander'),
    fs = require('fs'),
    path = require('path'),
    exec = require('child_process').exec,
    helpers = require('./helpers')

// commands
var save = require('./commands/save')

// **Main script**
var run = function(packageFile){
  // local variables
  var configDir = helpers.findFile('config','dir'),
      packageInfo = JSON.parse(fs.readFileSync(packageFile,'utf8'))
  
  console.log("config-heroku v"+packageInfo.version)
  // verify setup
  if(!configDir) return console.error("Could not find a config directory. Please create one!")
  process.nextTick(function(){
    program.version(packageInfo.version)
    // go
    program.parse(process.argv);
  })
  // **Commands**
  
  // save command
  program
    .command('save [configname] [varname] [app] [yes]')
    .description('save closest found production config to heroku env. Var name defaults to "[configname]_CONFIG", configname defaults to "heroku", yes will always save.')
    .action(function(configname,varname,app,yes){
      if(!yes && (app == 'yes' || app == 'true' || app == 'false')){
        yes = app
        app = false
      }
      save({
        configname : configname,
        varname : varname,
        configDir : configDir,
        app : app || false
      },function(config,cb){
        if(yes) return cb(true)
        program.confirm('Saving config: \n' + JSON.stringify(config,null,4) + '\nIs this ok? (y/n)', cb)
      },function(){
        process.exit(0)
      })
    })
  // add git hook
  program
    .command('hook [add] [configname] [varname] [app]')
    .description('adds or removes git hook to re-save configs with specified arguments to the nearest .git directory. Use "hook add or hook remove"')
    .action(function(add,configname,varname,app){
      add = add || "add"
      configname = configname || ""
      varname = varname || ""
      var gitDir = helpers.findFile('.git/hooks','dir'),
          existingPreCommit = '',
          preCommitCommand = 'config-heroku save '+configname+" "+varname+" "+app+" yes"
      if(!gitDir) return console.error("Could not find git hooks directory.")
      gitDir += "/.git/hooks"
      console.log("looking up hooks in "+gitDir)
      try {
        existingPreCommit = fs.readFileSync(gitDir + '/pre-commit','utf8')
        if(existingPreCommit.match(preCommitCommand) && add != "remove"){
          return console.error("pre-commit hooks already installed.")
        } else {
          console.log("modifying existing pre-commit hook")
        }
      } catch(e){ console.log("existing pre-commit hook not found.") }
      var writeString = existingPreCommit + "\n" + preCommitCommand
      if(add == "remove"){
        writeString = existingPreCommit.replace("\n"+preCommitCommand,'')
      }
      program.confirm("Updating pre-commit hook to:\n"+writeString+"\nIs this ok? (y/n)",function(ok){
        fs.writeFileSync(gitDir+'/pre-commit',writeString,'utf8')
        exec("chmod 755 "+gitDir+"/pre-commit",function(err,stdout,stderr){
          console.log("updated permissions")
          console.log('done.')
          process.exit(0)
        })
      })
    })
  program
    .command('use [varname] [app]')
    .description('tell heroku which config variable to use.')
    .action(function(varname,app){
      setConfig(varname,app || false,function(){
        process.exit(0)
      })
    })
  if(process.argv.length < 3){
    // show the help
    process.argv.push('--help')
    return program.parse(process.argv)
  }
}

if(require.main === module){
  run(__dirname + '/../package.json')
} else {
  module.exports = run
}