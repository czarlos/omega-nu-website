{
  "name": "config-heroku",
  "version": "0.1.1-a",
  "description": "An adapter for using node-config (https://github.com/lorenwest/node-config) on heroku",
  "main": "config-heroku.js",
  "scripts": {},
  "repository": {
    "type": "git",
    "url": "git://github.com/jesseditson/node-config-heroku.git"
  },
  "keywords": [
    "node-config",
    "heroku",
    "config",
    "gruntplugin"
  ],
  "author": {
    "name": "Jesse Ditson",
    "email": "jesse.ditson@gmail.com"
  },
  "license": "BSD",
  "dependencies": {
    "commander": ">=1.0.1- <1.1.0-"
  },
  "bin": {
    "config-heroku": "./lib/cli"
  },
  "readme": "node-config-heroku\n==================\n\nAn adapter for [node-config](https://github.com/lorenwest/node-config) that sticks configs in heroku env variables instead of reading from the FS.\n\nUsage\n=====\n\nadd it to your `package.json`, and use it exactly like [node-config](https://github.com/lorenwest/node-config):\n\n    npm install --save config-heroku\n\n    var config = require('config-heroku')\n\nAs config-heroku is api compatible with config, you can just globally find & replace `require('config')` with `require('config-heroku')` to achieve heroku compatibility.\n\nAs you'll want a heroku specific config, add a `heroku.json` file to your `config` folder. It'll act like a `production.json`, just only when it's up on heroku. You can add different ones if you want staging/prod setup (see [Black Belt Usage](#black-belt-usage) below).\n\nYou'll need to set up the command line tool to package up your config - you can install it everywhere using:\n\n    npm install -g config-heroku\n\nWhen you're ready to deploy, move the current config over to a heroku environment variable by runnning the `save` command:\n\n    config-heroku save\n\nYou can now safely deploy to heroku and your config will be there.\n\nCommit hook\n===========\n\nJust in case you didn't want to run `save` every time you update your config, node-config can auto-install a git hook that will take care of auto updating the variable:\n\n    hook add\n\nOops, you changed your mind? It's ok, config-heroku can clean up after itself:\n\n    hook remove\n\nNo more hook!\n\nGrunt\n=====\n\nThis config-heroku also has a grunt task - you can use it like so:\n\n\n    grunt.loadNpmTasks('config-heroku')\n\nthen later in your config:\n\n    grunt.initConfig({\n      'config-heroku' : {\n        configname : 'heroku',\n        varname : '<%= grunt.config(\"config-heroku\").configname.toUpperCase() %>_CONFIG'\n      }\n    })\n\nNow you can automatically update the heroku config vars when building.\n\nBlack-Belt Usage\n================\n\nYou're not convinced. What is the variable called? How does this work?\n\nDon't worry, young grasshoper, here are answers:\n\n- By default, config-heroku will save it's info as JSON in a variable called \"HEROKU_CONFIG\".\n\n- When saving, config-heroku will read from `config/heroku.json` (after inheriting default.json like node-config does) unless specified.\n\n- You can save and specify which config you'd like to save, using `config-heroku save somename`. This will now save using the `config/somename.json` file instead.\n\n- If you don't like the name `HEROKU_CONFIG`, you can change that too. Just use `config-heroku save somename MY_VARNAME`. Now you'll have a shiny new environment variable with your special config in it called `MY_VARNAME`.\n\n- Config always defaults to looking for the `HEROKU_CONFIG` variable. If you want to switch the current app to use something else, you can switch it using `config-heroku use MY_VARNAME`. Now your app will use the `MY_VARNAME` config instead of the `HEROKU_CONFIG` one.\n\n- Now you've got a bunch of names to remember and your hook is broken. Don't worry, the `hook` command accepts the same arguments as `save` - you can simply `config-heroku hook add somename MY_VARNAME`. Now when you commit, the `MY_VARNAME` config is updated to the info in `config/somename.json`.\n\n\nI work for devops and prefer non-markdown formatted documentation\n=================================================================\n\nOk, smarty pants. Hit `config-heroku` with no arguments and it'll spit out this info (you can also specify `-h` or `--help`, doesn't matter to me.):\n\n\n    Usage: config-heroku [options] [command]\n\n    Commands:\n\n      save [configname] [varname] [yes]\n      save closest found production config to heroku env. Var name defaults to \"[configname]_CONFIG\", configname defaults to \"heroku\", yes will always save.\n    \n      hook [add] [configname] [varname]\n      adds or removes git hook to re-save configs with specified arguments to the nearest .git directory. Use \"hook add or hook remove\"\n    \n      use [varname]\n      tell heroku which config variable to use.\n\n    Options:\n\n      -h, --help  output usage information\n\nThat's all.\n\nGithub issues is a fine place to put bugs for this project if you find them.\n\nJesse Ditson\n\njesse.ditson@gmail.com\n\n[@jesseditson](http://twitter.com/jesseditson)\n",
  "_id": "config-heroku@0.1.1-a",
  "dist": {
    "shasum": "c3809bc6142b2f72bc241425df1d4069cfe662ab",
    "tarball": "http://registry.npmjs.org/config-heroku/-/config-heroku-0.1.1a.tgz"
  },
  "maintainers": [
    {
      "name": "jesseditson",
      "email": "jesse.ditson@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "c3809bc6142b2f72bc241425df1d4069cfe662ab",
  "_from": "config-heroku@",
  "_resolved": "https://registry.npmjs.org/config-heroku/-/config-heroku-0.1.1a.tgz"
}
